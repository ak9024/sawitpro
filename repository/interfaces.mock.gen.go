// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/interfaces.go -destination=repository/interfaces.mock.gen.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockRepositoryInterface) CreateEstate(ctx context.Context, input Estate) (Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, input)
	ret0, _ := ret[0].(Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEstate(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEstate), ctx, input)
}

// CreateEstateTree mocks base method.
func (m *MockRepositoryInterface) CreateEstateTree(ctx context.Context, input EstateTree) (EstateTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstateTree", ctx, input)
	ret0, _ := ret[0].(EstateTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEstateTree indicates an expected call of CreateEstateTree.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEstateTree(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEstateTree), ctx, input)
}

// GetEstateById mocks base method.
func (m *MockRepositoryInterface) GetEstateById(ctx context.Context, id string) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateById", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEstateById indicates an expected call of GetEstateById.
func (mr *MockRepositoryInterfaceMockRecorder) GetEstateById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateById", reflect.TypeOf((*MockRepositoryInterface)(nil).GetEstateById), ctx, id)
}

// GetStats mocks base method.
func (m *MockRepositoryInterface) GetStats(ctx context.Context, estateId string) (int, int, int, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx, estateId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(float64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetStats indicates an expected call of GetStats.
func (mr *MockRepositoryInterfaceMockRecorder) GetStats(ctx, estateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockRepositoryInterface)(nil).GetStats), ctx, estateId)
}

// GetTreesById mocks base method.
func (m *MockRepositoryInterface) GetTreesById(ctx context.Context, estateId string) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreesById", ctx, estateId)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTreesById indicates an expected call of GetTreesById.
func (mr *MockRepositoryInterfaceMockRecorder) GetTreesById(ctx, estateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreesById", reflect.TypeOf((*MockRepositoryInterface)(nil).GetTreesById), ctx, estateId)
}
